---
import { gql, GraphQLClient } from 'graphql-request'
import Card from './card/Card.astro'
import Skeleton from './card/Skeleton.astro'
const githubAccessToken = import.meta.env.GITHUB_ACCESS_TOKEN

interface GitHubPinnedRepo {
  id: string
  name: string
  description: string
  url: string
  homepageUrl: string
  languages: {
    nodes: {
      name: string
      color: string
    }[]
  }
  forkCount: number
  stargazerCount: number
}

interface GitHubPinnedRepos {
  viewer: {
    pinnedItems: {
      nodes: GitHubPinnedRepo[]
    }
  }
}

const GITHUB_API_URL = 'https://api.github.com/graphql'

const GITHUB_PINNED_REPOS = gql`
  query {
    viewer {
      pinnedItems(first: 6, types: REPOSITORY) {
        nodes {
          ... on Repository {
            id
            name
            description
            url
            homepageUrl
            languages(first: 3) {
              nodes {
                name
                color
              }
            }
            forkCount
            stargazerCount
          }
        }
      }
    }
  }
`

const graphQLClient = new GraphQLClient(GITHUB_API_URL, {
  headers: {
    authorization: `Bearer ${githubAccessToken}`
  }
})

const data = await graphQLClient.request<GitHubPinnedRepos>(
  GITHUB_PINNED_REPOS,
  {}
)
const repos: GitHubPinnedRepo[] = data.viewer.pinnedItems.nodes
---

<div class='w-full flex flex-col md:grid grid-cols-2 gap-4'>
  {
    repos && repos.length > 0
      ? repos.map(
          ({
            description,
            forkCount,
            languages,
            name,
            stargazerCount,
            url
          }) => (
            <Card
              url={url}
              forkCount={forkCount}
              description={description}
              name={name}
              stargazerCount={stargazerCount}
              language={languages.nodes[0]}
            />
          )
        )
      : [...Array(6)].map(() => <Skeleton />)
  }
</div>
